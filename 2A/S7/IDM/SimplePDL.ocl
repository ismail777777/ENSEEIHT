import 'SimplePDL.ecore'

package simplepdl

context Process
inv warningSeverity: false
inv withMessage('Explicit message in process ' + self.name + ' (withMessage)'): false
/**inv errorSeverity: null*/

context Process
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()

context WorkSequence
inv notReflexive: self.predecessor <> self.successor

context Process
inv uniqNames: self.processElements
->select(pe | pe.oclIsKindOf(WorkDefinition))
->collect(pe | pe.oclAsType(WorkDefinition))
->forAll(w1, w2 | w1 = w2 or w1.name <> w2.name)

context Process
inv nameIsDefined: -- is the name of process correct?
if self.name.oclIsUndefined() then
false
else
self.name <> ''
endif

context Ressource
inv QuantiteNonNulle: self.Quantite > 0

context Allocation
inv QuantiteSuffisante: self.Occurence <= self.ressource.Quantite

context Ressource
inv uniqueName: self.Process.processElements
->select(pe | pe.oclIsKindOf(Ressource))
->collect(pe | pe.oclAsType(Ressource))
->forAll(w1, w2 | w1 = w2 or w1.name <> w2.name)

endpackage
